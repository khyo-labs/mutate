/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as RegisterRouteImport } from './routes/register';
import { Route as LoginRouteImport } from './routes/login';
import { Route as AdminRouteImport } from './routes/admin';
import { Route as SettingsRouteRouteImport } from './routes/settings/route';
import { Route as IndexRouteImport } from './routes/index';
import { Route as SettingsIndexRouteImport } from './routes/settings/index';
import { Route as MutationsIndexRouteImport } from './routes/mutations/index';
import { Route as MutationsNewRouteImport } from './routes/mutations/new';
import { Route as SettingsTeamsRouteRouteImport } from './routes/settings/teams/route';
import { Route as SettingsAccountRouteRouteImport } from './routes/settings/account/route';
import { Route as SettingsTeamsIndexRouteImport } from './routes/settings/teams/index';
import { Route as SettingsAccountIndexRouteImport } from './routes/settings/account/index';
import { Route as MutationsConfigIdIndexRouteImport } from './routes/mutations/$configId/index';
import { Route as SettingsTeamsWebhooksRouteImport } from './routes/settings/teams/webhooks';
import { Route as SettingsTeamsApiKeysRouteImport } from './routes/settings/teams/api-keys';
import { Route as SettingsAccountProfileRouteImport } from './routes/settings/account/profile';
import { Route as SettingsAccountAppearanceRouteImport } from './routes/settings/account/appearance';
import { Route as MutationsConfigIdEditRouteImport } from './routes/mutations/$configId/edit';

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any);
const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any);
const MutationsIndexRoute = MutationsIndexRouteImport.update({
  id: '/mutations/',
  path: '/mutations/',
  getParentRoute: () => rootRouteImport,
} as any);
const MutationsNewRoute = MutationsNewRouteImport.update({
  id: '/mutations/new',
  path: '/mutations/new',
  getParentRoute: () => rootRouteImport,
} as any);
const SettingsTeamsRouteRoute = SettingsTeamsRouteRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => SettingsRouteRoute,
} as any);
const SettingsAccountRouteRoute = SettingsAccountRouteRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => SettingsRouteRoute,
} as any);
const SettingsTeamsIndexRoute = SettingsTeamsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsTeamsRouteRoute,
} as any);
const SettingsAccountIndexRoute = SettingsAccountIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsAccountRouteRoute,
} as any);
const MutationsConfigIdIndexRoute = MutationsConfigIdIndexRouteImport.update({
  id: '/mutations/$configId/',
  path: '/mutations/$configId/',
  getParentRoute: () => rootRouteImport,
} as any);
const SettingsTeamsWebhooksRoute = SettingsTeamsWebhooksRouteImport.update({
  id: '/webhooks',
  path: '/webhooks',
  getParentRoute: () => SettingsTeamsRouteRoute,
} as any);
const SettingsTeamsApiKeysRoute = SettingsTeamsApiKeysRouteImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => SettingsTeamsRouteRoute,
} as any);
const SettingsAccountProfileRoute = SettingsAccountProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => SettingsAccountRouteRoute,
} as any);
const SettingsAccountAppearanceRoute =
  SettingsAccountAppearanceRouteImport.update({
    id: '/appearance',
    path: '/appearance',
    getParentRoute: () => SettingsAccountRouteRoute,
  } as any);
const MutationsConfigIdEditRoute = MutationsConfigIdEditRouteImport.update({
  id: '/mutations/$configId/edit',
  path: '/mutations/$configId/edit',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/settings': typeof SettingsRouteRouteWithChildren;
  '/admin': typeof AdminRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/settings/account': typeof SettingsAccountRouteRouteWithChildren;
  '/settings/teams': typeof SettingsTeamsRouteRouteWithChildren;
  '/mutations/new': typeof MutationsNewRoute;
  '/mutations': typeof MutationsIndexRoute;
  '/settings/': typeof SettingsIndexRoute;
  '/mutations/$configId/edit': typeof MutationsConfigIdEditRoute;
  '/settings/account/appearance': typeof SettingsAccountAppearanceRoute;
  '/settings/account/profile': typeof SettingsAccountProfileRoute;
  '/settings/teams/api-keys': typeof SettingsTeamsApiKeysRoute;
  '/settings/teams/webhooks': typeof SettingsTeamsWebhooksRoute;
  '/mutations/$configId': typeof MutationsConfigIdIndexRoute;
  '/settings/account/': typeof SettingsAccountIndexRoute;
  '/settings/teams/': typeof SettingsTeamsIndexRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/admin': typeof AdminRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/mutations/new': typeof MutationsNewRoute;
  '/mutations': typeof MutationsIndexRoute;
  '/settings': typeof SettingsIndexRoute;
  '/mutations/$configId/edit': typeof MutationsConfigIdEditRoute;
  '/settings/account/appearance': typeof SettingsAccountAppearanceRoute;
  '/settings/account/profile': typeof SettingsAccountProfileRoute;
  '/settings/teams/api-keys': typeof SettingsTeamsApiKeysRoute;
  '/settings/teams/webhooks': typeof SettingsTeamsWebhooksRoute;
  '/mutations/$configId': typeof MutationsConfigIdIndexRoute;
  '/settings/account': typeof SettingsAccountIndexRoute;
  '/settings/teams': typeof SettingsTeamsIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/settings': typeof SettingsRouteRouteWithChildren;
  '/admin': typeof AdminRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/settings/account': typeof SettingsAccountRouteRouteWithChildren;
  '/settings/teams': typeof SettingsTeamsRouteRouteWithChildren;
  '/mutations/new': typeof MutationsNewRoute;
  '/mutations/': typeof MutationsIndexRoute;
  '/settings/': typeof SettingsIndexRoute;
  '/mutations/$configId/edit': typeof MutationsConfigIdEditRoute;
  '/settings/account/appearance': typeof SettingsAccountAppearanceRoute;
  '/settings/account/profile': typeof SettingsAccountProfileRoute;
  '/settings/teams/api-keys': typeof SettingsTeamsApiKeysRoute;
  '/settings/teams/webhooks': typeof SettingsTeamsWebhooksRoute;
  '/mutations/$configId/': typeof MutationsConfigIdIndexRoute;
  '/settings/account/': typeof SettingsAccountIndexRoute;
  '/settings/teams/': typeof SettingsTeamsIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/settings'
    | '/admin'
    | '/login'
    | '/register'
    | '/settings/account'
    | '/settings/teams'
    | '/mutations/new'
    | '/mutations'
    | '/settings/'
    | '/mutations/$configId/edit'
    | '/settings/account/appearance'
    | '/settings/account/profile'
    | '/settings/teams/api-keys'
    | '/settings/teams/webhooks'
    | '/mutations/$configId'
    | '/settings/account/'
    | '/settings/teams/';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/admin'
    | '/login'
    | '/register'
    | '/mutations/new'
    | '/mutations'
    | '/settings'
    | '/mutations/$configId/edit'
    | '/settings/account/appearance'
    | '/settings/account/profile'
    | '/settings/teams/api-keys'
    | '/settings/teams/webhooks'
    | '/mutations/$configId'
    | '/settings/account'
    | '/settings/teams';
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/admin'
    | '/login'
    | '/register'
    | '/settings/account'
    | '/settings/teams'
    | '/mutations/new'
    | '/mutations/'
    | '/settings/'
    | '/mutations/$configId/edit'
    | '/settings/account/appearance'
    | '/settings/account/profile'
    | '/settings/teams/api-keys'
    | '/settings/teams/webhooks'
    | '/mutations/$configId/'
    | '/settings/account/'
    | '/settings/teams/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren;
  AdminRoute: typeof AdminRoute;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  MutationsNewRoute: typeof MutationsNewRoute;
  MutationsIndexRoute: typeof MutationsIndexRoute;
  MutationsConfigIdEditRoute: typeof MutationsConfigIdEditRoute;
  MutationsConfigIdIndexRoute: typeof MutationsConfigIdIndexRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/admin': {
      id: '/admin';
      path: '/admin';
      fullPath: '/admin';
      preLoaderRoute: typeof AdminRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/settings/': {
      id: '/settings/';
      path: '/';
      fullPath: '/settings/';
      preLoaderRoute: typeof SettingsIndexRouteImport;
      parentRoute: typeof SettingsRouteRoute;
    };
    '/mutations/': {
      id: '/mutations/';
      path: '/mutations';
      fullPath: '/mutations';
      preLoaderRoute: typeof MutationsIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/mutations/new': {
      id: '/mutations/new';
      path: '/mutations/new';
      fullPath: '/mutations/new';
      preLoaderRoute: typeof MutationsNewRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/settings/teams': {
      id: '/settings/teams';
      path: '/teams';
      fullPath: '/settings/teams';
      preLoaderRoute: typeof SettingsTeamsRouteRouteImport;
      parentRoute: typeof SettingsRouteRoute;
    };
    '/settings/account': {
      id: '/settings/account';
      path: '/account';
      fullPath: '/settings/account';
      preLoaderRoute: typeof SettingsAccountRouteRouteImport;
      parentRoute: typeof SettingsRouteRoute;
    };
    '/settings/teams/': {
      id: '/settings/teams/';
      path: '/';
      fullPath: '/settings/teams/';
      preLoaderRoute: typeof SettingsTeamsIndexRouteImport;
      parentRoute: typeof SettingsTeamsRouteRoute;
    };
    '/settings/account/': {
      id: '/settings/account/';
      path: '/';
      fullPath: '/settings/account/';
      preLoaderRoute: typeof SettingsAccountIndexRouteImport;
      parentRoute: typeof SettingsAccountRouteRoute;
    };
    '/mutations/$configId/': {
      id: '/mutations/$configId/';
      path: '/mutations/$configId';
      fullPath: '/mutations/$configId';
      preLoaderRoute: typeof MutationsConfigIdIndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/settings/teams/webhooks': {
      id: '/settings/teams/webhooks';
      path: '/webhooks';
      fullPath: '/settings/teams/webhooks';
      preLoaderRoute: typeof SettingsTeamsWebhooksRouteImport;
      parentRoute: typeof SettingsTeamsRouteRoute;
    };
    '/settings/teams/api-keys': {
      id: '/settings/teams/api-keys';
      path: '/api-keys';
      fullPath: '/settings/teams/api-keys';
      preLoaderRoute: typeof SettingsTeamsApiKeysRouteImport;
      parentRoute: typeof SettingsTeamsRouteRoute;
    };
    '/settings/account/profile': {
      id: '/settings/account/profile';
      path: '/profile';
      fullPath: '/settings/account/profile';
      preLoaderRoute: typeof SettingsAccountProfileRouteImport;
      parentRoute: typeof SettingsAccountRouteRoute;
    };
    '/settings/account/appearance': {
      id: '/settings/account/appearance';
      path: '/appearance';
      fullPath: '/settings/account/appearance';
      preLoaderRoute: typeof SettingsAccountAppearanceRouteImport;
      parentRoute: typeof SettingsAccountRouteRoute;
    };
    '/mutations/$configId/edit': {
      id: '/mutations/$configId/edit';
      path: '/mutations/$configId/edit';
      fullPath: '/mutations/$configId/edit';
      preLoaderRoute: typeof MutationsConfigIdEditRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

interface SettingsAccountRouteRouteChildren {
  SettingsAccountAppearanceRoute: typeof SettingsAccountAppearanceRoute;
  SettingsAccountProfileRoute: typeof SettingsAccountProfileRoute;
  SettingsAccountIndexRoute: typeof SettingsAccountIndexRoute;
}

const SettingsAccountRouteRouteChildren: SettingsAccountRouteRouteChildren = {
  SettingsAccountAppearanceRoute: SettingsAccountAppearanceRoute,
  SettingsAccountProfileRoute: SettingsAccountProfileRoute,
  SettingsAccountIndexRoute: SettingsAccountIndexRoute,
};

const SettingsAccountRouteRouteWithChildren =
  SettingsAccountRouteRoute._addFileChildren(SettingsAccountRouteRouteChildren);

interface SettingsTeamsRouteRouteChildren {
  SettingsTeamsApiKeysRoute: typeof SettingsTeamsApiKeysRoute;
  SettingsTeamsWebhooksRoute: typeof SettingsTeamsWebhooksRoute;
  SettingsTeamsIndexRoute: typeof SettingsTeamsIndexRoute;
}

const SettingsTeamsRouteRouteChildren: SettingsTeamsRouteRouteChildren = {
  SettingsTeamsApiKeysRoute: SettingsTeamsApiKeysRoute,
  SettingsTeamsWebhooksRoute: SettingsTeamsWebhooksRoute,
  SettingsTeamsIndexRoute: SettingsTeamsIndexRoute,
};

const SettingsTeamsRouteRouteWithChildren =
  SettingsTeamsRouteRoute._addFileChildren(SettingsTeamsRouteRouteChildren);

interface SettingsRouteRouteChildren {
  SettingsAccountRouteRoute: typeof SettingsAccountRouteRouteWithChildren;
  SettingsTeamsRouteRoute: typeof SettingsTeamsRouteRouteWithChildren;
  SettingsIndexRoute: typeof SettingsIndexRoute;
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsAccountRouteRoute: SettingsAccountRouteRouteWithChildren,
  SettingsTeamsRouteRoute: SettingsTeamsRouteRouteWithChildren,
  SettingsIndexRoute: SettingsIndexRoute,
};

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  AdminRoute: AdminRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  MutationsNewRoute: MutationsNewRoute,
  MutationsIndexRoute: MutationsIndexRoute,
  MutationsConfigIdEditRoute: MutationsConfigIdEditRoute,
  MutationsConfigIdIndexRoute: MutationsConfigIdIndexRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
